---
mode: daemonset

presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: true

extraEnvs:
  - name: OTEL_AGENT_HOST_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.hostIP

config:
  receivers:
    otlp:
      protocols:
        grpc:
          max_recv_msg_size_mib: 8
    # prometheus:
    #   config:
    #     scrape_configs:
    #     - job_name: 'otel-collector'
    #       scrape_interval: 10s
    #       static_configs:
    #       - targets: ['0.0.0.0:8888']

  processors:
    batch:
      send_batch_max_size: 5242880

    memory_limiter:
      check_interval: 2s
      limit_mib: 500

    resource:
      attributes:
      - action: insert
        key: loki.resource.labels
        value: k8s.pod.name

    k8sattributes:
      filter:
        node_from_env_var: OTEL_AGENT_HOST_IP
      auth_type: "serviceAccount"
      passthrough: true
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
        annotations:
          - tag_name: $1
            key_regex: prometheus.io/(.*)
        labels:
          - tag_name: $1
            key_regex: app.kubernetes.io/(.*)
          - tag_name: $1
            key_regex: catalog.anaplan.io/(.*)
          - tag_name: $1
            key_regex: monitoring.o11y.io/(.*)
      pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

  exporters:
    logging:
      logLevel: debug

    loki:
      format: json
      tls:
        insecure: true
      timeout: 20s
      labels:
        attributes:
          log.iostream: "log_iostream"
          log.file.path: "log_file_path"
          k8s.namespace.name: "k8s_namespace_name"
          k8s.pod.name: "k8s_pod_name"
          k8s.pod.uid: "k8s_pod_uid"
          k8s.container.name: "k8s_container_name"
          k8s.container.restart_count: "k8s_container_restart_count"
        resource:
          host.name: "hostname"
          os.type: "os_type"
          k8s.object.name: "k8s_object_name"

  service:
    pipelines:
      logs:
        exporters:
          - loki
        processors:
          - batch
          - k8sattributes
          - resource
        receivers:
          - otlp
      metrics:
        receivers: [otlp]
        processors: []
        exporters: [prometheusremotewrite]
      # traces:
      #   receivers: [otlp]
      #   processors: []
      #   exporters: []


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "otel-readonly"

clusterRole:
  # Specifies whether a clusterRole should be created
  create: true
  name: "otel-readonly"
  # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rules: 
    - apiGroups:
        - "*"
      resources:
        - "*"
      verbs:
        - get
        - watch
        - list
    - nonResourceURLs:
        - /metrics
        - /prometheus
        - /health
      verbs:
        - get
        - watch
        - list
